import org.gradle.internal.os.OperatingSystem

plugins {
    id "de.undercouch.download" version "3.4.3"
}

final gradleWrapperEntrypoint

if (OperatingSystem.current().isWindows()) {
    gradleWrapperEntrypoint = 'gradlew.bat'
} else {
    gradleWrapperEntrypoint = 'gradlew'
}

task checkRequirements(type:GradleBuild) {
    tasks = ['checkMasterAppRequirements', 'checkMicroPythonWriterRequirements', 'checkControllerWriterRequirements', 'checkControllerLinterRequirements', 'checkControllerFormatterRequirements']
}

task build(type:GradleBuild) {
    tasks = ['buildMasterApp', 'lintController']
}

task clean(type:GradleBuild) {
    tasks = ['cleanMasterApp']
}

task buildMasterApp(type:Exec, dependsOn: 'checkMasterAppRequirements') {
    workingDir './master'
    commandLine "./${gradleWrapperEntrypoint}", 'shadowJar'
}

task cleanMasterApp(type:Exec) {
    workingDir './master'
    commandLine "./${gradleWrapperEntrypoint}", 'clean'
}

task printCommandLineMasterApp {
    doLast {
        println 'java -jar ./master/build/libs/tellorche-master-app.jar sequence --config ./examples/single-move.tellorcheconfig.example.json'
    }
}

task writeMicroPythonToEsp32(type:Exec, dependsOn: ['checkMicroPythonWriterRequirements', 'downloadMicroPythonForEsp32']) {
    doFirst {
        if (!project.hasProperty('port')) {
            throw new GradleException('`-Pport=***`がセットされていません');
        }
    }
    commandLine 'esptool.py', '--chip', 'esp32', '--port', "${project.findProperty('port') ?: ''}", '--baud', '115200', 'write_flash', '-z', '0x1000', './caches/esp32-20180511-v1.9.4.bin'
}

task downloadMicroPythonForEsp32 {
    doLast {
        download {
            src 'http://micropython.org/resources/firmware/esp32-20180511-v1.9.4.bin'
            dest new File('./caches/esp32-20180511-v1.9.4.bin')
            onlyIfModified true
        }
    }
}

task checkMasterAppRequirements {
    doLast {
        if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
            throw new GradleException('NG: JDK 8のインストールが必要です')
        } else {
            println 'OK: Java 8がインストールされています'
        }
        if (!checkCommandExists('javac -version')) {
            throw new GradleException('NG: JDK 8のインストールが必要です')
        } else {
            println 'OK: JDK 8がインストールされています'
        }
    }
}

task checkMicroPythonWriterRequirements {
    doLast {
        if (!checkCommandExists('esptool.py -h')) {
            throw new GradleException('NG: esptoolのインストールが必要です')
        } else {
            println 'OK: esptoolがインストールされています'
        }
    }
}

task printCommandLineWriteMicroPythonForEsp32 {
    doLast {
        println "./${gradleWrapperEntrypoint} writeMicroPythonToEsp32 -Pport=/your/serial/port"
    }
}

task checkControllerWriterRequirements {
    doLast {
        if (!checkCommandExists('ampy --version')) {
            throw new GradleException('NG: ampyのインストールが必要です')
        } else {
            println 'OK: ampyがインストールされています'
        }
    }
}

task printCommandLineWriteController {
    doLast {
        println "./${gradleWrapperEntrypoint} writeController -Pport=/your/serial/port"
    }
}

task writeController(dependsOn: 'checkMicroPythonWriterRequirements') {
    doFirst {
        if (!project.hasProperty('port')) {
            throw new GradleException('`-Pport=***`がセットされていません');
        }
    }
    doLast {
        exec {
            workingDir './controllers/micropython'
            commandLine 'ampy', '--port', "${project.findProperty('port') ?: ''}", 'put', 'main.py'
        }
    }
}

task checkControllerFormatterRequirements {
    doLast {
        if (!checkCommandExists('autopep8 --version')) {
            throw new GradleException('NG: autopep8のインストールが必要です')
        } else {
            println 'OK: autopep8がインストールされています'
        }
    }
}

task checkControllerLinterRequirements {
    doLast {
        if (!checkCommandExists('pycodestyle --version')) {
            throw new GradleException('NG: pycodestyleのインストールが必要です')
        } else {
            println 'OK: pycodestyleがインストールされています'
        }
    }
}

task lintController(type:Exec, dependsOn: 'checkControllerLinterRequirements') {
    workingDir './controllers/micropython'
    commandLine 'pycodestyle', './'
}

task formatController(type:Exec, dependsOn: 'checkControllerFormatterRequirements') {
    workingDir './controllers/micropython'
    commandLine 'autopep8', '-i', 'main.py'
}

boolean checkCommandExists(command) {
    try {
        def p = Runtime.getRuntime().exec(command)
        p.waitFor()
        return p.exitValue() == 0
    } catch (ignored) {
        return false
    }
}
